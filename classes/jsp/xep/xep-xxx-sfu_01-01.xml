<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header> 
  <title>In-band SFU Sessions</title> 
  <abstract>This specification defines a protocol extension for communicating in-band with a media selective forwarding unit (SFU) over XMPP
  </abstract>

  <number>XXXX</number> 
  <status>ProtoXEP</status> 
  <type>Standards Track</type> 
  <sig>Standards</sig> 
  <dependencies>   
      <spec>XEP-0335</spec>
  </dependencies> 
  <supersedes/> 
  <supersededby/> 
  <shortname>sfu</shortname> 
  <author>
  	<firstname>Dele</firstname>
	<surname>Olajide</surname> 
	<email>dele@olajide.net</email>	
  </author>
  <revision> 
    <version>0.1</version> 
    <date>2022-05-13</date> 
    <initials>do</initials> 
    <remark>Initial version.</remark> 
  </revision> 
   
</header> 
<section1 topic='Introduction' anchor='intro'> 
  <p>An SFU (selective forwarding unit)is capable of receiving multiple media streams and then decide which of these media streams should be sent to which participants.
	In the SFU architecture, every participant sends his or her media stream to a centralized server (SFU) and receives streams from all other participants via the same central server.</p>
  <p>The purpose of this protocol extension is to provide a generic specification of how an XMPP client can communicate in-band with an SFU via simple IQ stanzas</p>
</section1> 

<section1 topic='Requirements' anchor='reqs'> 
  <p>This document addresses the following requirements:</p> 
  <ul> 
    <li><p>Enable XMPP clients to maintain a session with a SFU from an existing XMPP connection without switching protocols or transport. The XMPP server will act as a proxy and maintain the required connections to the SFU. Typically, the SFU will bind to localhost and accept websocket connections from the XMPP server. This removes the need to expose the SFU directly to clients.</p> </li>

    <li><p>Enable the client to send the required content/payload to the SFU without any need to marshall that data to or from XML. Typically, this would be JSON content with embedded SDP for the media sessions.</p></li> 
  </ul> 
</section1> 

<section1 topic='Protocol' anchor='protocol'> 
<p>As this is a generic specification, the protocol will depend on the SFU impmentation. Most SFUs use a symmetric, asynchronous protocol. In client-server usage, some messages are only sent in the client to server or in the server to client direction.</p>   
  <section2 topic='Client to Server' anchor='c2s'> 
    
    <p>A sample protocol flow of a message from the XMPP client to the Galene SFU is shown below.</p> 
    <example caption='Client sends an ICE candidate to the SFU'><![CDATA[ 
<iq from='anyuser@shakespeare.lit/globe' to="shakespeare.lit" type="set" id="q1">
  <c2s xmlns="urn:xmpp:sfu:galene:0">
    <json xmlns="urn:xmpp:json:0">
	{
		"type":"ice",
		"id":"c27f64006fec100b9059f98ac17ecd9d",
		"candidate":{
			"candidate":"candidate:4258379142 1 udp 2122194687 192.168.1.250 55730 typ host generation 0 ufrag 22gS network-id 2",
			"sdpMid":"0",
			"sdpMLineIndex":0
		}
	}
    </c2s>
  </json>
</iq> 
    ]]></example> 
    <p>A sample protocol flow of a message from the Galene SFU to the XMPP client is shown below.</p> 
    <example caption='SFU sends an ICE candidate to the Client'><![CDATA[
<iq from="shakespeare.lit" to='anyuser@shakespeare.lit/globe' type="set" id="q1">
  <s2c xmlns="urn:xmpp:sfu:galene:0">
    <json xmlns="urn:xmpp:json:0">
	{
		"type":"ice",
		"id":"c27f64006fec100b9059f98ac17ecd9d",
		"candidate":{
			"candidate":"candidate:161388498 1 udp 2122260223 172.24.176.1 52755 typ host generation 0 ufrag rvu2 network-id 1",
			"sdpMid":"0",
			"sdpMLineIndex":0
		}
	}
    </s2c>
  </json>
</iq> 
    ]]></example> 
  </section2>   
</section1> 

<section1 topic='Deployment Notes' anchor='deployment'> 

<p>The &lt;c2s&gt; and the &lt;s2c&gt; elements MUST NOT be empty, as the empty string is not valid JSON. The data MUST be encoded as UTF-8 (though officially unspecified, this is the de facto encoding for JSON today.</p>

<p>Implementations SHOULD validate JSON they receive and intend to use, and be prepared to handle invalid data appropriately (such as by responding to the sender with the applicable XMPP error reply for the stanza type.</p>

<p>As the &lt;json&gt; element alone provides no context to the recipient about the kind of data it contains, only the format, it SHOULD always be encapsulated within the &lt;c2s&gt; or &lt;s2c&gt; element that provides a context and SHOULD NOT be added as a direct child of a stanza.</p>

</section1> 

<section1 topic='Security Considerations' anchor='security'> 
  <p>JSON is a very common format for data interchange today, and has many popular implementations available in browsers and standalone libraries that can be assumed relatively well-tested. However an implementation receiving JSON data from an untrusted entity should take precautions and MUST NOT attempt to use invalid JSON data it receives in any way, nor must it accept data in any encoding other than UTF-8 to avoid potential encoding mismatch attacks</p>
</section1> 
<section1 topic='IANA Considerations' anchor='iana'> 
  <p>This document requires no interaction with IANA.</p> 
</section1> 
<section1 topic='XMPP Registrar Considerations' anchor='registrar'> 
  <p>The Registrar shall include the following information in its registries.</p> 
  <section2 topic='Protocol Namespaces' anchor='registrar-protocol'> 
    <p>The XMPP Registrar includes "urn:xmpp:sfu:galene:0" in its registry of protocol namespaces.</p> 
  </section2> 
</section1> 
</xep> 
